def REACT_NATIVE_VERSION = new File(['node', '--print', "JSON.parse(require('fs').readFileSync(require.resolve('react-native/package.json'), 'utf-8')).version"].execute(null, rootDir).text.trim())

allprojects {

  configurations.all {
    resolutionStrategy {
      // Remove this override in 0.66, as a proper fix is included in react-native itself.
      force "com.facebook.react:react-native:" + REACT_NATIVE_VERSION
    }
  }
  repositories {
    exclusiveContent {
      filter {
        includeGroup "com.facebook.react"
      }
      forRepository {
        maven {
          url "$rootDir/../node_modules/react-native/android"
        }
      }
    }
    gradlePluginPortal()
    google()
  }
}

buildscript {
  apply from: 'versions.gradle'
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['AwesomeModule_kotlinVersion']

  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:7.2.2'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['AwesomeModule_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['AwesomeModule_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  defaultConfig {
    minSdkVersion 21
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  buildFeatures {
    viewBinding true
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
}

repositories {

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new FileNotFoundException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}


def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
  // noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:0.71.0-rc.0'
  implementation 'com.twilio:audioswitch:1.1.5'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.30"
  implementation "androidx.core:core-ktx:$CORE_KTX_VERSION"

  implementation "io.github.crow-misia.libmediasoup-android:libmediasoup-android:0.12.0"
  implementation "io.github.crow-misia.libyuv:libyuv-android:0.24.0"

  implementation 'com.google.mlkit:face-detection:16.1.5'
  implementation 'com.google.mlkit:segmentation-selfie:16.0.0-beta4'

  implementation project(":SDK")

  implementation "androidx.lifecycle:lifecycle-extensions:$LIFECYCLE_VERSION"
  implementation "com.google.dagger:dagger:$DAGGER_VERSION"

  kapt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
  implementation "com.jakewharton.timber:timber:$TIMBER_VERSION"
  implementation("io.reactivex.rxjava2:rxjava:$RX_JAVA_VERSION")
  implementation("io.reactivex.rxjava2:rxandroid:$RX_VERSION")
  implementation "org.protoojs.droid:protoo-client:$PROTO_VERSION"
  implementation("com.squareup.okhttp3:okhttp:$OKHTTP_VERSION")
  implementation("com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION")
}
